name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{secrets.DO_HOST}}
          username: ${{secrets.DO_USERNAME}}
          key: ${{secrets.DO_SSH_KEY}}
          script: |
            # Navigate to the application directory
            cd ~/mysecondbrain.info-BE

            # Load environment if exists or continue
            [ -f ".env.production" ] && set -o allexport; source .env.production; set +o allexport

            # Pull the latest code
            git checkout main
            git pull
            
            # Make scripts executable
            chmod +x ./nginx/init-letsencrypt.sh ./nginx/renew-certs.sh ./nginx/setup-renewal-cron.sh
            
            # Create SSL config if needed
            if [ ! -f ".env.ssl" ]; then
              echo "Creating SSL configuration..."
              echo "DOMAIN=api.mysecondbrain.info" > .env.ssl
              echo "EMAIL=aquib.jansher@gmail.com" >> .env.ssl
              echo "STAGING=0" >> .env.ssl
            fi
            
            # Properly stop all services first
            echo "Stopping existing services..."
            docker compose --env-file .env.ssl -f docker-compose.production.yml down
            
            # Clean up any stale containers, networks, and volumes
            echo "Cleaning up unused resources..."
            docker system prune -f

            # Rebuild and start services with --build flag
            echo "Building and starting services..."
            docker compose --env-file .env.ssl -f docker-compose.production.yml up -d --build
            
            # Wait for services to start
            echo "Waiting for services to start..."
            sleep 10
            
            # Verify the site is working
            echo "Verifying HTTPS access..."
            if curl -k -s -o /dev/null -w "%{http_code}" https://api.mysecondbrain.info/ | grep -q "2[0-9][0-9]"; then
              echo "✅ HTTPS is working properly!"
            else
              echo "⚠️ HTTPS check returned a non-2xx response code."
              echo "You may want to check the Docker logs:"
              echo "docker compose --env-file .env.ssl -f docker-compose.production.yml logs nginx"
            fi
            
            # Clean up only older unused Docker resources (>24h)
            echo "Cleaning up old unused Docker resources..."
            docker system prune -a --filter "until=24h" -f 