name: Deploy to DigitalOcean

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{secrets.DO_HOST}}
          username: ${{secrets.DO_USERNAME}}
          key: ${{secrets.DO_SSH_KEY}}
          script: |
            # Navigate to the application directory
            cd ~/mysecondbrain.info-BE

            # Load environment if exists or continue
            [ -f ".env.production" ] && set -o allexport; source .env.production; set +o allexport

            # Pull the latest code
            git checkout main
            git pull
            
            # Make scripts executable
            chmod +x ./nginx/init-letsencrypt.sh ./nginx/renew-certs.sh ./nginx/setup-renewal-cron.sh
            
            # Cleanup any stray certbot containers
            echo "Cleaning up stray containers..."
            docker ps | grep certbot | awk '{print $1}' | xargs -r docker rm -f
            docker ps -a | grep -E "certbot-run-|certbot_run" | awk '{print $1}' | xargs -r docker rm -f
            
            # Validate DNS resolution
            echo "Checking DNS resolution for api.mysecondbrain.info..."
            if ! host api.mysecondbrain.info; then
              echo "WARNING: Domain api.mysecondbrain.info does not resolve correctly!"
              echo "Please ensure DNS is properly configured to point to this server's IP."
              IP_ADDRESS=$(curl -s https://ipinfo.io/ip)
              echo "This server's public IP is: $IP_ADDRESS"
              echo "DNS should point to this IP."
            fi
            
            # Create/update SSL config if needed
            if [ ! -f ".env.ssl" ]; then
              echo "Creating SSL configuration..."
              echo "DOMAIN=api.mysecondbrain.info" > .env.ssl
              echo "EMAIL=aquib.jansher@gmail.com" >> .env.ssl
              echo "STAGING=0" >> .env.ssl
              
              # Create required directories with proper permissions
              mkdir -p ./nginx/logs 
              mkdir -p ./data/certbot/conf
              
              # Stop existing containers
              docker compose -f docker-compose.production.yml down
              
              # Run initial SSL setup with direct script
              ./nginx/init-letsencrypt.sh
              ./nginx/setup-renewal-cron.sh
            else
              # Check certificate validity
              if [ ! -f "./data/certbot/conf/live/api.mysecondbrain.info/cert.pem" ] || 
                 ! openssl x509 -checkend 2592000 -noout -in "./data/certbot/conf/live/api.mysecondbrain.info/cert.pem" 2>/dev/null; then
                echo "Certificates missing or expiring soon. Running renewal..."
                ./nginx/renew-certs.sh
              else
                echo "Certificates are valid for at least 30 more days."
                
                # Restart containers if they need to be updated
                docker compose --env-file .env.ssl -f docker-compose.production.yml up -d
              fi
            fi
            
            # Verify the site is working
            echo "Verifying HTTPS access..."
            curl -k https://api.mysecondbrain.info/ || echo "HTTPS access not yet available - this is normal for first-time setup."
            
            # Clean up
            docker system prune -a --filter "until=24h" -f 